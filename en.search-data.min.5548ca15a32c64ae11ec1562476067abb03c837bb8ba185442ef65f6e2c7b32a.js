'use strict';(function(){const b={cache:!0};b.doc={id:'id',field:['title','content'],store:['title','href','section']};const a=FlexSearch.create('balance',b);window.bookSearchIndex=a,a.add({id:0,href:'/homelab/docs/apps/adminer/',title:"Adminer",section:"Apps",content:"Apps - Adminer #  Adminer (formerly phpMinAdmin) is a full-featured database management tool written in PHP. https://www.adminer.org/\n"}),a.add({id:1,href:'/homelab/docs/maintenance/remove_app/',title:"Remove App",section:"Maintenance",content:"Maintenance - Remove App #  TODO\n"}),a.add({id:2,href:'/homelab/docs/deploy/requirements/',title:"Requirements",section:"Deploy",content:"Deploy - Requirements #  OS #  It is recommended that you will use Ubuntu or similar Debian based system. This project assumes that you have apt-get installed. It is highly recommended that you use Ubuntu Server for the best experience.\nDocker #  This project requires that you have installed Docker. Link to the instructions: https://docs.docker.com/engine/install/ubuntu/\nYou don\u0026rsquo;t need to install Docker compose.\nPython 3 #  You will need to install Python 3 and pip. The Python 3 already comes installed with the latest Ubuntu OS by default. To install Python and pip, use the following command:\n$ sudo apt-get install python3 python3-pip Ansible #  Finally, you will need Ansible installed on your machine where you are running this project from. Link to the instructions: https://docs.ansible.com/ansible/latest/installation_guide/intro_installation.html#installing-ansible-on-ubuntu\nIn short, you will have to do the following:\n$ sudo apt update $ sudo apt install software-properties-common $ sudo apt-add-repository --yes --update ppa:ansible/ansible $ sudo apt install ansible Swarm Mode #  You must setup Docker Swarm. You don\u0026rsquo;t need to add additional nodes into your cluster (but you can). All you need is a single manager. To configure Docker in Swarm Mode, run the following command:\n$ docker swarm init You don\u0026rsquo;t need to do additional steps afterwards. The token displayed in the output is used to connect additional worker nodes into your manager.\nNext #  Folder Structure\n"}),a.add({id:3,href:'/homelab/docs/deploy/folder_structure/',title:"Folder Structure",section:"Deploy",content:"Deploy - Folder Structure #  Data folder #  All of the persistent data created and used by all of the apps will be located in a single folder defined by data_dir variable.\nFor example, NextCloud will use the following folders:\n {{ data_dir }}/nextcloud/html {{ data_dir }}/nextcloud/apps {{ data_dir }}/nextcloud/config {{ data_dir }}/nextcloud/theme  Each app will have its own subfolder. Portainer goes into portainer, all Matrix services go into matrix, and so on. The name of the subfolder matches the Ansible \u0026ldquo;rule\u0026rdquo; of the app. This makes it easier to run backups. (TODO: describe backup options).\nFor the purpose of this example, we will set variable data_dir to \u0026quot;/homelab/data\u0026quot;. You will have to create that folder yourself!\n$ sudo mkdir /homelab $ sudo chown 1000:1000 /homelab $ mkdir /homelab/data Git Repository #  Next, you will have to clone this repository somewhere in your system.\nAnsible works in a way that you can have all of the configurations located in some local workstation and it will be deployed into some remote server. For the purpose of this example, we will use the same machine to run the Ansible and to deploy the services into (i.e. everything is on localhost). Read here for more information: https://docs.ansible.com/ansible/latest/user_guide/intro_inventory.html\nClone this repository into your desired folder. We will use /homelab/repo as the destination.\n$ cd /homelab $ git clone https://github.com/matusnovak/homelab.git repo # Now you have /homelab/repo Note\nAll of the configuration (i.e. Ansible variables) will be stored in this repository in the group_vars/homelab folder. Don\u0026rsquo;t remove this repository.\n Next #  Configuration\n"}),a.add({id:4,href:'/homelab/docs/deploy/configuration/',title:"Configuration",section:"Deploy",content:"Deploy - Configuration #  Ansible Variables #  Ansible uses variables to specify differences between systems. This project uses these variables to define properties such as: domain name, docker project (i.e. stack name), LDAP information, passwords, etc.\nEach application has its own dedicated folder inside of repo/roles/\u0026lt;name\u0026gt;/defaults/main.yml. These variables define how the application will be deployed. Some applications depend on variables from other roles (for example, NextCloud depends on Traefik).\nThe default variables work \u0026ldquo;out of the box\u0026rdquo; and are tested on GitHub Actions every time some change is made to this project. Meaning, you don\u0026rsquo;t have to modify them in order for your deployment to succeed.\nHowever, you probably don\u0026rsquo;t want a default domain name of https://homelab.lan. You should go through the variables and override them depending on what you want!. It is highly recommended that you first check repo/roles/base/main.yml!\nWarning\nDon\u0026rsquo;t change the variables in repo/roles/\u0026lt;name\u0026gt;/defaults/main.yml. It is recommended that you \u0026ldquo;override\u0026rdquo; them in your repo/group_vars/homelab/*.yml files.\n You can read more about Ansible variables here: https://docs.ansible.com/ansible/latest/user_guide/playbooks_variables.html#playbooks-variables\nSelect apps to deploy #  In order to deploy your Homelab, you will have to create the following file:\nrepo/site.yml That has the following format:\n--- - hosts: homelab roles: - base - postgres - ldap # etc... name of the roles... You must choose the apps you wish to deploy by simply adding the role name into the roles: list. You must also ensure that all of the dependencies for your app are listed before your app! For example, NextCloud depends on Traefik, LDAP, and Postgres. Therefore the - nextcloud must be listed after - postgres \\n - ldap \\n - traefik.\nTo find out what apps you can deploy, their role names, and their dependencies, head over to the Apps page.\nWarning\nRemoving the role from the repo/site.yml will not remove the app (i.e. Docker service) from your host. Removing the role chages the configuration of some relevant apps, but it will not remove them. Additionally, removing the role does not remove the data for that app.\nRemoving files, databases, and Docker services must be done manually! Ansible will take care only for the configuration.\nTo read more about this, go to the Remove App page.\n Override default variables #  To override the default variables, create a folder repo/group_vars/homelab and create a file repo/group_vars/homelab/main.yml. This file will contain your variables in a YAML syntax. Simply copy the key name (for example domain_name: from repo/roles/base/main.yml) and add it here \u0026amp; change the value.\nYou can create separate files in this directory. It is recommended that you use main.yml or \u0026lt;role name\u0026gt;.yml naming conventions.\nYou should at minimum override the following:\n data_dir - into /homelab/data domain_name - into your domain of your choosing domain_component - to match your domain (must be in form of dc=example,dc=com)  You should override the passwords in an encrypted YAML file. This encrypted file is called Vault. Head over to the next page to see how that is done.\nNext #  Vault\n"}),a.add({id:5,href:'/homelab/docs/deploy/',title:"Deploy",section:"Docs",content:"Deploy #  To deploy your own Homelab, you will need Python 3, pip, Ansible, Docker (in Swarm mode), clone this repository, change the default variables, and finally choose the apps you want to deploy.\nStart with the Requirements page.\n"}),a.add({id:6,href:'/homelab/docs/apps/',title:"Apps",section:"Docs",content:"Apps #  "}),a.add({id:7,href:'/homelab/docs/deploy/vault/',title:"Vault",section:"Deploy",content:"Deploy - Vault #  Ansible Vault #  Ansible Vaults work just as any other YAML configuration file, except they are encrypted. More information here: https://docs.ansible.com/ansible/latest/user_guide/vault.html\nCreate Vault #  To create Vault, simply do the following:\n$ cd /homelab $ export EDITOR=nano $ ansible-vault create repo/group_vars/homelab/vault.yml You will be asked to type a new password for this vault. You will need this password if you want to deploy the apps or if you want to edit it.\nNote:\nIt is recommended that you store your passwords in here (admin passwords, databse passwords, jwt secrets, etc.)\n Edit Vault #  Editing vault is done in the exact same way as creating one. Simply replace create with edit. You will need the original password you have used during creation.\n$ cd /homelab $ export EDITOR=nano $ ansible-vault edit repo/group_vars/homelab/vault.yml Next #  Ansible Playbook\n"}),a.add({id:8,href:'/homelab/docs/deploy/playbook/',title:"Ansible Playbook",section:"Deploy",content:"Deploy - Ansible Playbook #  Before you begin #  Before you deploy your Homelab, make sure you have done the following:\n Enabled Docker Swarm. You are on the Swarm manager. Set data_dir to your desired folder by overwriting it in group_vars. Set the desired domain name and domain component. Chosen the apps you wish to use by adding their roles into site.yml. Overwritten any default variables for the apps you wish to use.  Run the Playbook #  To deploy your apps, simply run the playbook using the following command:\n$ cd /homelab/repo $ ansible-playbook -i hosts site.yml --ask-become-pass --ask-vault-pass After the Playbook has run, you should see the following:\nPLAY RECAP *********************************************************************** 127.0.0.1 : ok=18 changed=9 unreachable=0 failed=0 skipped=45 rescued=0 ignored=0 The ok=18 means that the tasks have been successful. The changed=9 means that some tasks have modified your system. Re-running your Playbook without changing any variables will produce changed=0 (i.e. nothing has been modified).\nYou are now able to access your apps!\nTo find out what subdomain to use to access your applications, and how to log in, go to the Apps page.\nHealth check #  If you want to check whether your application is alive and accessible, you can use the following curl command:\n$ curl -v -k \u0026#34;https://localhost\u0026#34; -H \u0026#34;Host: nextcloud.yourdomain.name\u0026#34; Simply replace nextcloud with the correct subdomain for your app. You need to provide the Host header so that Traefik knows where to forward your request to.\nPlaybook tips #  You can add -v, -vv, or -vvv into the ansible-playbook command line to see more verbose output. Note that this output will print out your passwords.\nIf you are re-running the playbook multiple times, you can create a file vault.pass with the Vault password in plaintext (no newlines) and then replace --ask-vault-pass with --vault-password-file vault.pass. This is NOT recommended but useful for debugging purposes.\nYou can also use --extra-vars \u0026quot;ansible_become_pass=SudoPasswordHere\u0026quot; instead of --ask-become-pass. This is NOT recommended but useful for debugging purposes.\n"}),a.add({id:9,href:'/homelab/docs/maintenance/',title:"Maintenance",section:"Docs",content:"Maintenance #  TODO\n"}),a.add({id:10,href:'/homelab/docs/contributing/',title:"Contributing",section:"Docs",content:"Contributing #  "})})()