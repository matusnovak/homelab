---
- name: Create configuration
  kubernetes.core.k8s:
    state: present
    verify_ssl: '{{ k8s_ssl_verify }}'
    api_version: '{{ k8s_api_version }}'
    api_key: '{{ k8s_api_key }}'
    definition:
      apiVersion: v1
      kind: ConfigMap
      metadata:
        name: traefik-config
        namespace: '{{ project_name }}'
        labels:
          app: traefik
      data:
        'traefik.yml': "{{ lookup('template', 'roles/traefik/files/traefik.yml.j2') }}"

- name: Create service
  kubernetes.core.k8s:
    state: present
    verify_ssl: '{{ k8s_ssl_verify }}'
    api_version: '{{ k8s_api_version }}'
    api_key: '{{ k8s_api_key }}'
    definition:
      apiVersion: v1
      kind: Service
      metadata:
        name: traefik
        namespace: '{{ project_name }}'
        labels:
          app: traefik
      spec:
        type: NodePort
        ports:
          - port: 443
            protocol: TCP
            name: 'https'
          - port: 80
            protocol: TCP
            name: 'http'
        selector:
          app: traefik

- name: Create service account
  kubernetes.core.k8s:
    state: present
    verify_ssl: '{{ k8s_ssl_verify }}'
    api_version: '{{ k8s_api_version }}'
    api_key: '{{ k8s_api_key }}'
    definition:
      apiVersion: v1
      kind: ServiceAccount
      metadata:
        namespace: '{{ project_name }}'
        name: traefik-ingress-controller

- name: Create persistent volume claim
  kubernetes.core.k8s:
    state: present
    verify_ssl: '{{ k8s_ssl_verify }}'
    api_version: '{{ k8s_api_version }}'
    api_key: '{{ k8s_api_key }}'
    definition:
      apiVersion: v1
      kind: PersistentVolumeClaim
      metadata:
        namespace: '{{ project_name }}'
        name: traefik-certs-pv-claim
        labels:
          app: traefik
          type: local
      spec:
        storageClassName: microk8s-hostpath
        resources:
          requests:
            storage: 128Mi
        accessModes:
          - ReadWriteMany

- name: Create deployment
  kubernetes.core.k8s:
    state: present
    verify_ssl: '{{ k8s_ssl_verify }}'
    api_version: '{{ k8s_api_version }}'
    api_key: '{{ k8s_api_key }}'
    definition:
      apiVersion: v1
      kind: Deployment
      metadata:
        name: traefik
        namespace: '{{ project_name }}'
        labels:
          app: traefik
      spec:
        replicas: 1
        strategy:
          type: Recreate
        revisionHistoryLimit: 0
        selector:
          matchLabels:
            app: traefik
        template:
          metadata:
            name: traefik
            namespace: '{{ project_name }}'
            labels:
              app: traefik
          spec:
            containers:
              - name: traefik
                image: '{{ traefik_image }}'
                imagePullPolicy: "IfNotPresent"
                ports:
                  - name: 'http'
                    containerPort: 80
                  - name: 'https'
                    containerPort: 443
                volumeMounts:
                  - mountPath: /etc/traefik/traefik.yml
                    name: traefik-config
                    subPath: 'traefik.yml'
                  - mountPath: /certs
                    name: traefik-certs
            volumes:
              - name: traefik-config
                configMap:
                  name: traefik-config
              - name: traefik-certs
                persistentVolumeClaim:
                  claimName: traefik-certs-pv-claim

- name: Wait for service ready
  kubernetes.core.k8s_info:
    verify_ssl: '{{ k8s_ssl_verify }}'
    api_version: '{{ k8s_api_version }}'
    api_key: '{{ k8s_api_key }}'
    kind: Deployment
    namespace: '{{ project_name }}'
    name: 'traefik'
    label_selectors: 
      - app = traefik
  register: output_info
  until: output_info | json_query('resources[*].status.readyReplicas') | select ('match','1') | list | length == 1
  delay: 5
  retries: 5

- name: Find service
  kubernetes.core.k8s_info:
    verify_ssl: '{{ k8s_ssl_verify }}'
    api_version: '{{ k8s_api_version }}'
    api_key: '{{ k8s_api_key }}'
    kind: Service
    name: traefik
    namespace: '{{ project_name }}'
  register: traefik_service

- name: Get traefik http port
  set_fact:
    traefik_http_port: "{{ traefik_service | json_query('resources[0].spec.ports[?name==`http`].nodePort') | json_query('[0]') | string }}"
  when: traefik_http_enabled

- name: Get traefik https port
  set_fact:
    traefik_https_port: "{{ traefik_service | json_query('resources[0].spec.ports[?name==`https`].nodePort') | json_query('[0]') | string }}"
  when: traefik_https_enabled

- name: Get traefik address
  set_fact:
    traefik_host_port: "{{ traefik_https_enabled | ternary(443, 80) }}"
    traefik_port: "{{ traefik_https_enabled | ternary(traefik_https_port, traefik_http_port) }}"
    traefik_address: "{{ traefik_https_enabled | ternary('https://localhost:' + traefik_http_port, 'http://localhost:' + traefik_http_port) }}"
