---
- name: Create Synapse folders
  become: yes
  file:
    path: "{{ data_dir }}/data/matrix/{{ item }}"
    state: directory
    mode: 0755
    owner: "1337"
    group: "1337"
    recurse: no
  loop:
    - "synapse"
    - "bridges"

- name: Create Nginx folders
  become: yes
  file:
    path: "{{ data_dir }}/data/matrix/{{ item }}"
    state: directory
    mode: 0755
    owner: "0"
    group: "0"
    recurse: no
  loop:
    - "nginx"
    - "nginx/www"
    - "nginx/www/.well-known"
    - "nginx/www/.well-known/matrix"

- name: Create Coturn folders
  become: yes
  file:
    path: "{{ data_dir }}/data/matrix/{{ item }}"
    state: directory
    mode: 0755
    owner: "0"
    group: "0"
    recurse: no
  loop:
    - "coturn"
  when: "matrix.coturn.enabled"

- name: Set some facts
  set_fact:
    matrix_signing_key_file: "matrix.{{ domain_name }}.signing.key"

- name: Check if signing key exists
  stat:
    path: "{{ data_dir }}/data/matrix/synapse/{{ matrix_signing_key_file }}"
  register: matrix_signing_key

- name: Generate signing key
  docker_run:
    docker:
      host: "{{ docker.host }}"
    container:
      image: "{{ images.matrix_synapse }}"
      command:
        - "generate"
      volumes:
        - host: "/tmp/matrix/synapse"
          guest: "/data"
          read_only: false
      environment:
        - key: "SYNAPSE_SERVER_NAME"
          value: "matrix.{{ domain_name }}"
        - key: "SYNAPSE_REPORT_STATS"
          value: "no"
  when: "not matrix_signing_key.stat.exists"

- name: Copy signing key
  become: yes
  copy:
    remote_src: true
    src: "/tmp/matrix/synapse/{{ matrix_signing_key_file }}"
    dest: "{{ data_dir }}/data/matrix/synapse/{{ matrix_signing_key_file }}"
  when: "not matrix_signing_key.stat.exists"

- name: Create log config
  become: yes
  copy:
    src: "roles/matrix/files/synapse/domain_name.log.config"
    dest: "{{ data_dir }}/data/matrix/synapse/matrix.{{ domain_name }}.log.config"
  register: matrix_log

- name: Create database and user
  docker_script:
    docker:
      host: "{{ docker.host }}"
    network: "{{ docker_network.name }}"
    image: "{{ scriptrunner.id }}"
    script: "/tmp/postgres.py"
    args:
      - "create"
      - |
        {
          "host": "{{ container_postgres.alias }}",
          "user": "postgres",
          "password": "{{ passwords.postgres_admin }}",
          "database": "postgres",
          "port": 5432,
          "create": {
            "database": {
              "name": "synapse",
              "extra": "ENCODING 'UTF8' LC_COLLATE='C' LC_CTYPE='C' template=template0"
            },
            "user": {
              "name": "synapse",
              "password": "{{ passwords.matrix_database }}",
              "database": "synapse"
            }
          }
        }

- name: Create LDAP group
  docker_script:
    docker:
      host: "{{ docker.host }}"
    network: "{{ docker_network.name }}"
    image: "{{ scriptrunner.id }}"
    script: "/tmp/openldap.py"
    args:
      - "group"
      - |
        {
          "address": "ldap://{{ container_ldap.alias }}:389",
          "user": "cn=admin,{{ ldap.domain }}",
          "password": "{{ passwords.ldap_admin }}",
          "base": "{{ ldap_groups.dn }}",
          "name": "{{ matrix.ldap.group }}",
          "members": [
            {
              "name": "cn=admin,{{ ldap.domain }}"
            }
          ]
        }
  register: "ldap_groups_matrix"
  when: "matrix.ldap.enabled"

- name: Deploy Redis
  docker_deploy:
    host: "{{ docker.host }}"
    project: "{{ project_name }}"
    container:
      image: "{{ images.matrix_redis }}"
      name: "matrix_redis"
      command:
        - "redis-server"
        - "--requirepass"
        - "{{ passwords.matrix_redis }}"
      networks:
        - name: "{{ docker_network.name }}"
          alias: "matrix_redis"
  register: container_matrix_redis

- name: Generate config files
  become: yes
  template:
    src: "roles/matrix/files/{{item}}.j2"
    dest: "{{ data_dir }}/data/matrix/{{item}}"
  loop:
    - "synapse/homeserver.yaml"
    - "nginx/matrix.conf"
    - "nginx/www/.well-known/matrix/client"
    - "nginx/www/.well-known/matrix/server"
    - "{{ matrix.coturn.enabled | ternary('coturn/turnserver.conf', undefined) }}"
  when: "item is not undefined"
  register: matrix_synapse_config

- name: Deploy Nginx
  docker_deploy:
    host: "{{ docker.host }}"
    project: "{{ project_name }}"
    container:
      image: "{{ images.matrix_nginx }}"
      name: "matrix_nginx"
      networks:
        - name: "{{ docker_network.name }}"
          alias: "matrix_nginx"
      volumes:
        - host: "{{ data_dir }}/data/matrix/nginx/matrix.conf"
          guest: "/etc/nginx/conf.d/matrix.conf"
          read_only: true
        - host: "{{ data_dir }}/data/matrix/nginx/www"
          guest: "/var/www"
          read_only: true
      labels:
        - key: "traefik.enable"
          value: "true"
        - key: "traefik.http.services.matrix.loadbalancer.server.port"
          value: "80"
        - key: "traefik.http.routers.matrix.rule"
          value: "Host(`matrix.{{ domain_name }}`)"
        - key: "traefik.http.routers.matrix.entrypoints"
          value: "{{ traefik_entrypoints }}"
        - key: "traefik.http.routers.matrix.tls.certresolver"
          value: "{{ traefik_certresolver }}"
        - key: "traefik.http.routers.matrix.tls"
          value: "{{ 'true' if traefik.https.enabled else 'false' }}"
  register: container_matrix_nginx

- name: Deploy Coturn
  docker_deploy:
    host: "{{ docker.host }}"
    project: "{{ project_name }}"
    container:
      image: "{{ images.matrix_coturn }}"
      name: "matrix_coturn"
      networks:
        - name: "{{ docker_network.name }}"
          alias: "matrix_coturn"
      volumes:
        - host: "{{ data_dir }}/data/matrix/coturn/turnserver.conf"
          guest: "/etc/coturn/turnserver.conf"
          read_only: true
      ports:
        - host: "{{ matrix.coturn.listening_port }}"
          guest: "{{ matrix.coturn.listening_port }}"
          protocol: "udp"
        - host: "{{ matrix.coturn.listening_port }}"
          guest: "{{ matrix.coturn.listening_port }}"
          protocol: "tcp"
        - host: "{{ matrix.coturn.port_min }}-{{ matrix.coturn.port_max }}"
          guest: "{{ matrix.coturn.port_min }}-{{ matrix.coturn.port_max }}"
          protocol: "udp"
  register: container_matrix_coturn
  when: "matrix.coturn.enabled"

- name: Deploy Synapse
  docker_deploy:
    host: "{{ docker.host }}"
    project: "{{ project_name }}"
    container:
      image: "{{ images.matrix_synapse }}"
      name: "matrix_synapse"
      networks:
        - name: "{{ docker_network.name }}"
          alias: "matrix_synapse"
      volumes:
        - host: "{{ data_dir }}/data/matrix/synapse"
          guest: "/data"
          read_only: false
        - host: "{{ data_dir }}/data/matrix/bridges"
          guest: "/bridges"
          read_only: false
          mode: "z"
      environment:
        - key: "UID"
          value: "1337"
        - key: "GID"
          value: "1337"
        - key: "TZ"
          value: "Europe/London"
        - key: "SYNAPSE_CONFIG_DIR"
          value: "/data"
        - key: "SYNAPSE_CONFIG_PATH"
          value: "/data/homeserver.yaml"
  register: container_matrix_synapse

- name: Restart
  docker_restart:
    host: "{{ docker.host }}"
    project: "{{ project_name }}"
    containers:
      - "matrix_synapse"
      - "matrix_nginx"
      - "matrix_coturn"
  when: container_matrix_synapse.changed == false and matrix_synapse_config.changed

- name: Restart Nginx
  docker_restart:
    host: "{{ docker.host }}"
    project: "{{ project_name }}"
    containers:
      - "matrix_nginx"
  when: container_matrix_synapse.changed

- name: Healthcheck for Synapse 
  http_wait:
    url: "{{traefik_entrypoint}}/_matrix/client/versions"
    status_code: "200"
    retries: 3
    delay: 5
    headers:
      - "Host: matrix.{{ domain_name }}"
