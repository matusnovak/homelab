---
- name: Check if postgres role is included
  fail:
    msg: "Kanboard needs the postgres role"
  when: "'postgres' not in role_names"

- name: Check if traefik role is included
  fail:
    msg: "Kanboard needs the traefik role"
  when: "'traefik' not in role_names"

- name: Check if LDAP role is included
  fail:
    msg: "Kanboard needs the ldap role"
  when: "kanboard_ldap_enabled and 'ldap' not in role_names"

- name: Create Kanboard folder structure
  become: yes
  file:
    path: "{{ data_dir }}/kanboard/{{item}}"
    state: directory
    mode: 0755
    owner: "100"
    group: "101"
    recurse: no
  loop:
    - "data"
    - "plugins"
    - "ssl" # Not really used

- name: Create LDAP group
  ldap_group:
    container: "{{ openldap_service.tasks[0].id }}"
    user: "{{ ldap_admin_user }}"
    password: "{{ ldap_admin_password }}"
    base: "{{ ldap_groups_dn }}"
    cn: "{{ kanboard_ldap_group }}"
    members:
      - "{{ ldap_admin_user }}"
  when: kanboard_ldap_enabled

- name: Create database role
  postgres_role:
    container: "{{ postgres_service.tasks[0].id }}"
    password: "{{ postgres_password }}"
    role: "{{ kanboard_postgres_role }}"
    role_password: "{{ kanboard_postgres_password }}"

- name: Create database
  postgres_database:
    container: "{{ postgres_service.tasks[0].id }}"
    password: "{{ postgres_password }}"
    database: "{{ kanboard_postgres_database }}"
    role: "{{ kanboard_postgres_role }}"

- name: Create config files
  become: yes
  template:
    src: "roles/kanboard/files/{{item}}.j2"
    dest: "{{ data_dir }}/kanboard/{{item}}"
  loop:
    - "data/config.php"
  register: kanboard_config

- name: Remove existing service if config changes
  docker_swarm_service:
    project_name: "{{ project_name }}"
    remove:
      - "kanboard"
  when: kanboard_config.changed

- name: Deploy service
  docker_swarm_service:
    project_name: "{{ project_name }}"
    definition:
      kanboard:
        image: "{{ kanboard_image }}"
        deploy:
          replicas: 1
          labels:
            - "traefik.enable=true"
            - "traefik.http.routers.kanboard.rule=Host(`kanboard.{{ domain_name }}`)"
            - "traefik.http.services.kanboard.loadbalancer.server.port=80"
            - "traefik.http.routers.kanboard.entrypoints={{ traefik_entrypoints }}"
            - "traefik.http.routers.kanboard.tls={{ traefik_tls }}"
            - "traefik.http.routers.kanboard.tls.certresolver={{ traefik_certresolver }}"
        networks:
          - "{{ docker_network_name }}"
        volumes:
          - "{{ data_dir }}/kanboard/data:/var/www/app/data"
          - "{{ data_dir }}/kanboard/plugins:/var/www/app/plugins"
          - "{{ data_dir }}/kanboard/ssl:/etc/nginx/ssl"
  register: result

- name: Set facts
  set_fact:
    kanboard_service: "{{ result.services.kanboard }}"

- name: Healthcheck
  http_wait:
    url: "{{ traefik_address }}/login"
    status_code: "200"
    retries: 5
    delay: 6
    headers:
      - "Host: kanboard.{{ domain_name }}"

- name: Setup data
  set_fact:
    init_data: |
      {
        "url": "{{ traefik_address }}",
        "host": "kanboard.{{ domain_name }}",
        "username": "admin",
        "password": "{{ kanboard_admin_passwords }}"
      }

- name: Initialize
  script: "roles/kanboard/scripts/main.py init {{ init_data | to_json | tojson }}"
  args:
    executable: python3
  register: kanboard_init_script
  changed_when: "'Changed!' in kanboard_init_script.stdout"
